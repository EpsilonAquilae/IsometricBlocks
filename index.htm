
<!doctype html>
<html>
<head>
	<meta charset="utf8">
	<style>
		body {
			width: 800px;
			margin-left:auto;
			margin-right:auto;
			font-size: 1.2em;
		}
		canvas {
			background-color: #EEE;
			border: 0px solid black;
			border-radius: 5px;
			box-shadow: 0px 0px 2px #000;
			margin-right: 5px;
			text-align: center;
		}
		#abstract {
			font-style: italic;
		}
		figure {
			margin-top:2em;
			margin-bottom:2em;
		}
		figcaption {
			font-style: italic;
			color: #555;
		}
		code.block {
			white-space: pre;
			display:block;
			margin-top:3em;
			margin-bottom:3em;
			margin-left: auto;
			margin-right: auto;
			width: 650px;
			padding: 1.5em;
			background: #eee;
			box-shadow: 0px 0px 2px #000;
			border-radius: 5px;
		}

		/* from vim's TOhtml command for syntax highlighting code */
		.lnr { color: #ff0000; }
		.Constant { color: #ef2929; }
		.Statement { color: #3465a4; }
		.Comment { color: #4e9a06; }
		.Identifier { color: #3465a4; }
	</style>

	<script src='src/main.js'></script>
	<script src='src/colors.js'></script>
	<script src='src/block.js'></script>
	<script src='src/camera.js'></script>
	<script src='src/vector.js'></script>
	<script src='src/painter.js'></script>
	<script src='src/sortBlocks.js'></script>
</head>
<body>
	
	<h1>Drawing isometric boxes in the correct order</h1>

	<p>
In an <a href="http://en.wikipedia.org/wiki/Isometric_projection">isometric</a>
display, it can be tricky to draw boxes of various sizes in the correct order
to keep them appropriately in front of or behind one another.  The figure below
shows an example.  The blue box should be drawn first, then green, then red.
	</p>

	<figure>
		<canvas id='figure1a' width=350 height=200></canvas>
		<canvas id='figure1b' width=350 height=200></canvas>
		<figcaption>
Figure 1: The boxes on the left are <u>not</u> drawn in the correct order, whereas the
boxes on the right are drawn correctly.
		</figcaption>
		<script>
			var blocks = [
				new IsoBlock.Block({x:1,y:3,z:0},{x:2,y:2,z:2.5}, IsoBlock.colors.green),
				new IsoBlock.Block({x:2,y:2,z:0},{x:1,y:1,z:1.5}, IsoBlock.colors.red),
				new IsoBlock.Block({x:3,y:1,z:0},{x:1,y:4,z:1},   IsoBlock.colors.blue),
			];
			IsoBlock.makeFigure({ canvas:'figure1a', blocks: blocks, sortBlocks: false, });
			IsoBlock.makeFigure({ canvas:'figure1b', blocks: blocks, });
		</script>
	</figure>

	<p>
We will explore a simple solution for determining the correct order to draw a
given set of boxes.  But first, we must define what we mean by <em>boxes</em>.
	</p>

	<h3>What do we mean by <em>boxes</em>?</h3>

	<p>
We define boxes as <em>axis-aligned</em> and <em>non-intersecting</em>
rectangular prisms. Take a look at the above Figure 1 again.  Each box is
parallel to the <em>x</em>, <em>y</em>, and <em>z</em> axis (i.e.
axis-aligned).  Also, note that the boxes are next to each other but do not
intersect.
	</p>

	<h3>How can we determine when one box is in front of another?</h3>

	<p>
Since our boxes do not intersect each other, we can visualize their separation
as a thin plane between them (see Figure 2 below).  After identifying this
plane, we can determine which box is in front by selecting the one on the
correct side of this plane.
	</p>

	<figure>
		<canvas id='figure2a' width=230 height=200></canvas>
		<canvas id='figure2b' width=230 height=200></canvas>
		<canvas id='figure2c' width=230 height=200></canvas>
		<figcaption>
Figure 2: A pair of blocks can be separated in one of three ways shown here. 
The dark glass illustrates this separation.
		</figcaption>
		<script>
			var refBlock =   new IsoBlock.Block({x:3,y:2,z:0},{x:2,y:2,z:2}, IsoBlock.colors.blue);
			var leftBlock =  new IsoBlock.Block({x:2,y:4,z:0},{x:2.25,y:2,z:1}, IsoBlock.colors.red);
			var topBlock =   new IsoBlock.Block({x:4,y:2,z:2},{x:1.25,y:2,z:1}, IsoBlock.colors.orange);
			var frontBlock = new IsoBlock.Block({x:1,y:1,z:0},{x:2,y:2,z:1}, IsoBlock.colors.green);
			IsoBlock.makeFigure({ canvas:'figure2a', drawPlane: true,
				blocks: [ refBlock, leftBlock ],
			});
			IsoBlock.makeFigure({ canvas:'figure2b', drawPlane: true,
				blocks: [ refBlock, topBlock ],
			});
			IsoBlock.makeFigure({ canvas:'figure2c', drawPlane: true,
				blocks: [ refBlock, frontBlock ],
			});
		</script>
	</figure>

	<p>
We can find this plane of separation by looking at each axis individually.  In
particular, we look for an axis which has non-intersecting box ranges (see
Figure 3 below).  
	</p>

	<figure>
		<canvas id='figure3a' width=350 height=200></canvas>
		<canvas id='figure3b' width=350 height=200></canvas>
		<figcaption>
Figure 3: On the left, the blocks are separated on the y-axis.  On the right,
the blocks are separated on the x-axis. (The z-axis is omitted for simplicity.)
		</figcaption>
		<script>
			IsoBlock.makeFigure({ canvas:'figure3a',
				blocks: [ refBlock, leftBlock ],
				drawAxis: true,
			});
			IsoBlock.makeFigure({ canvas:'figure3b',
				blocks: [ refBlock, frontBlock ],
				drawAxis: true,
			});
		</script>
	</figure>

	<p>
In Figure 3 above, we have chosen a coordinate system which make lesser values
of <em>x</em> and <em>y</em> to be closer to the camera.  Though not shown,
the <em>z</em> axis is positive in the up direction, so a greater value makes
it closer to the camera.
	</p>

	<p>
The following is a javascript function for determining if the first block is in front of the second:
	</p>

	<code class='block'><span class="Identifier">function</span> isBoxInFront(box1, box2) <span class="Identifier">{</span>

    <span class="Comment">// test for intersection x-axis</span>
    <span class="Comment">// (lower x value is in front)</span>
    <span class="Statement">if</span> (box1.xmin &gt;= box2.xmax) <span class="Identifier">{</span> <span class="Statement">return</span> <span class="Constant">false</span>; <span class="Identifier">}</span>
    <span class="Statement">else</span> <span class="Statement">if</span> (box2.xmin &gt;= box1.xmax) <span class="Identifier">{</span> <span class="Statement">return</span> <span class="Constant">true</span>; <span class="Identifier">}</span>

    <span class="Comment">// test for intersection y-axis</span>
    <span class="Comment">// (lower y value is in front)</span>
    <span class="Statement">if</span> (box1.ymin &gt;= box2.ymax) <span class="Identifier">{</span> <span class="Statement">return</span> <span class="Constant">false</span>; <span class="Identifier">}</span>
    <span class="Statement">else</span> <span class="Statement">if</span> (box2.ymin &gt;= box1.ymax) <span class="Identifier">{</span> <span class="Statement">return</span> <span class="Constant">true</span>; <span class="Identifier">}</span>

    <span class="Comment">// test for intersection z-axis</span>
    <span class="Comment">// (higher z value is in front)</span>
    <span class="Statement">if</span> (box1.zmin &gt;= box2.zmax) <span class="Identifier">{</span> <span class="Statement">return</span> <span class="Constant">true</span>; <span class="Identifier">}</span>
    <span class="Statement">else</span> <span class="Statement">if</span> (box2.zmin &gt;= box1.zmax) <span class="Identifier">{</span> <span class="Statement">return</span> <span class="Constant">false</span>; <span class="Identifier">}</span>

<span class="Identifier">}</span></code>

	<h3>What order do we draw the boxes in?</h3>

<a href="https://github.com/shaunew/IsometricBlocks"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png" alt="Fork me on GitHub"></a>

</body>
</html>
